// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/core.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamExample_SendData_FullMethodName      = "/StreamExample/SendData"
	StreamExample_SendQuotation_FullMethodName = "/StreamExample/SendQuotation"
)

// StreamExampleClient is the client API for StreamExample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamExampleClient interface {
	SendData(ctx context.Context, in *SendDataRequest, opts ...grpc.CallOption) (StreamExample_SendDataClient, error)
	SendQuotation(ctx context.Context, in *QuotationRequest, opts ...grpc.CallOption) (StreamExample_SendQuotationClient, error)
}

type streamExampleClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamExampleClient(cc grpc.ClientConnInterface) StreamExampleClient {
	return &streamExampleClient{cc}
}

func (c *streamExampleClient) SendData(ctx context.Context, in *SendDataRequest, opts ...grpc.CallOption) (StreamExample_SendDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamExample_ServiceDesc.Streams[0], StreamExample_SendData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamExampleSendDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamExample_SendDataClient interface {
	Recv() (*SendDataResponse, error)
	grpc.ClientStream
}

type streamExampleSendDataClient struct {
	grpc.ClientStream
}

func (x *streamExampleSendDataClient) Recv() (*SendDataResponse, error) {
	m := new(SendDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamExampleClient) SendQuotation(ctx context.Context, in *QuotationRequest, opts ...grpc.CallOption) (StreamExample_SendQuotationClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamExample_ServiceDesc.Streams[1], StreamExample_SendQuotation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamExampleSendQuotationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamExample_SendQuotationClient interface {
	Recv() (*QuotationNotify, error)
	grpc.ClientStream
}

type streamExampleSendQuotationClient struct {
	grpc.ClientStream
}

func (x *streamExampleSendQuotationClient) Recv() (*QuotationNotify, error) {
	m := new(QuotationNotify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamExampleServer is the server API for StreamExample service.
// All implementations must embed UnimplementedStreamExampleServer
// for forward compatibility
type StreamExampleServer interface {
	SendData(*SendDataRequest, StreamExample_SendDataServer) error
	SendQuotation(*QuotationRequest, StreamExample_SendQuotationServer) error
	mustEmbedUnimplementedStreamExampleServer()
}

// UnimplementedStreamExampleServer must be embedded to have forward compatible implementations.
type UnimplementedStreamExampleServer struct {
}

func (UnimplementedStreamExampleServer) SendData(*SendDataRequest, StreamExample_SendDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedStreamExampleServer) SendQuotation(*QuotationRequest, StreamExample_SendQuotationServer) error {
	return status.Errorf(codes.Unimplemented, "method SendQuotation not implemented")
}
func (UnimplementedStreamExampleServer) mustEmbedUnimplementedStreamExampleServer() {}

// UnsafeStreamExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamExampleServer will
// result in compilation errors.
type UnsafeStreamExampleServer interface {
	mustEmbedUnimplementedStreamExampleServer()
}

func RegisterStreamExampleServer(s grpc.ServiceRegistrar, srv StreamExampleServer) {
	s.RegisterService(&StreamExample_ServiceDesc, srv)
}

func _StreamExample_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamExampleServer).SendData(m, &streamExampleSendDataServer{stream})
}

type StreamExample_SendDataServer interface {
	Send(*SendDataResponse) error
	grpc.ServerStream
}

type streamExampleSendDataServer struct {
	grpc.ServerStream
}

func (x *streamExampleSendDataServer) Send(m *SendDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamExample_SendQuotation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuotationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamExampleServer).SendQuotation(m, &streamExampleSendQuotationServer{stream})
}

type StreamExample_SendQuotationServer interface {
	Send(*QuotationNotify) error
	grpc.ServerStream
}

type streamExampleSendQuotationServer struct {
	grpc.ServerStream
}

func (x *streamExampleSendQuotationServer) Send(m *QuotationNotify) error {
	return x.ServerStream.SendMsg(m)
}

// StreamExample_ServiceDesc is the grpc.ServiceDesc for StreamExample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamExample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamExample",
	HandlerType: (*StreamExampleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _StreamExample_SendData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendQuotation",
			Handler:       _StreamExample_SendQuotation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/core.proto",
}
